# Runetika - A Cosmic Terminal Adventure
# 
# Project Configuration:
# This Cargo.toml defines how Rust builds our game.
# 
# For Abstract Thinkers:
# Think of this as a dependency graph where each crate (library) provides
# a set of capabilities that compose into our final game. The version numbers
# form a compatibility matrix ensuring all parts work together.
# 
# For Practical Users:
# This file lists all the external code libraries we use and tells Rust
# how to compile the game for best performance.

[package]
name = "runetika"
version = "0.1.0"
edition = "2021"  # Using Rust 2021 edition for latest language features

[dependencies]
# Core Game Engine
# Bevy provides the foundation: graphics, input, audio, and the ECS architecture
bevy = "0.16"

# Physics Engine (currently unused but ready for future features)
# Avian2D will handle collision detection and physics simulation
avian2d = "0.2"

# Random Number Generation
# Used for procedural generation, particle effects, and gameplay randomness
rand = "0.8"

# Serialization for save games and settings
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"

# Platform directories for proper settings storage
dirs = "5.0"

# Development Profile - Fast iteration
# Balances compilation speed with runtime performance
[profile.dev]
opt-level = 1  # Some optimization without slow builds

# Optimize dependencies even in debug mode
# Your code compiles fast, but libraries run at full speed
[profile.dev.package."*"]
opt-level = 3

# Release Profile - Maximum performance
[profile.release]
lto = "thin"  # Link-time optimization for 10-20% performance gain
codegen-units = 1  # Single codegen unit for better optimization

# Platform-specific optimizations can be added:
# [target.'cfg(target_os = "macos")'.dependencies]
# metal = "0.29"  # For Metal rendering on macOS
