# Cargo configuration for the project

# Optimize build times
[target.x86_64-unknown-linux-gnu]
linker = "clang"
rustflags = ["-C", "link-arg=-fuse-ld=lld"]

[target.x86_64-apple-darwin]
rustflags = [
    "-C", "link-arg=-fuse-ld=lld",
    "-C", "split-debuginfo=unpacked",
]

[target.aarch64-apple-darwin]
rustflags = [
    "-C", "split-debuginfo=unpacked",
    # Optimize for Apple Silicon
    "-C", "target-cpu=apple-m1",
]

[target.x86_64-pc-windows-msvc]
rustflags = ["-C", "target-feature=+crt-static"]

[target.wasm32-unknown-unknown]
runner = "wasm-server-runner"

# Alias commands for convenience
[alias]
# Update dependencies
update-deps = "run --package tools --bin update-deps"
# Check for outdated deps
check-deps = "outdated"
# Security audit
audit = "audit"
# Run with profiling
profile = "run --release --features debug"
# Build for all platforms
build-all = "build --target x86_64-apple-darwin --target aarch64-apple-darwin --target wasm32-unknown-unknown"
# Format and lint
fmt-check = "fmt -- --check"
lint = "clippy -- -D warnings"


# Registry configuration
[registries.crates-io]
protocol = "sparse"  # Use sparse registry protocol for faster updates

# Network configuration
[net]
retry = 3  # Number of retries for network requests
offline = false  # Set to true for offline development

# Profile for faster compilation during development
[profile.dev]
# Enable some optimizations for dependencies
opt-level = 1
# Enable parallel frontend compilation
split-debuginfo = "unpacked"

[profile.dev.package."*"]
# Optimize all dependencies even in debug mode
opt-level = 3

# Use mold linker on Linux for faster linking (if available)
[target.'cfg(target_os = "linux")']
rustflags = ["-C", "linker=clang", "-C", "link-arg=-fuse-ld=mold"]